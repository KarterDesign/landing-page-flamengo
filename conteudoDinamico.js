/**
 * Conte√∫do Din√¢mico - Google Sheets Integration
 * Carrega dinamicamente textos e imagens da p√°gina do Google Sheets
 */

// URL do Google Sheets CSV para textos e imagens
const GOOGLE_SHEETS_CONTEUDO_URL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQuz0diAWyMYDYYQjK0LMDC0pwzhTlrB9eT3aNtotZJkPgucV2QC646FR9KLD1t6xdhZsYkKXta0bIJ/pub?gid=0&single=true&output=csv';

// Valores padr√£o para fallback
const CONTEUDO_PADRAO = {
    // Header
    'header-logo-text': 'Ag√™ncia Oficial de Viagens e Experi√™ncias',
    'header-logo-img': 'img/flamengo-absolut-sport-logo-oficial-parceria.png',
    'nav-link-1': 'Espa√ßo FLA+',
    'nav-link-2': 'Oeste Inferior',
    'nav-link-3': 'Camarote ABSOLUT Sport',
    'mobile-nav-link-1': 'Espa√ßo FLA+',
    'mobile-nav-link-2': 'Oeste Inferior',
    'mobile-nav-link-3': 'Camarote ABSOLUT Sport',
    
    // Hero
    'hero-video': 'vid/intro-flamengo-na√ß√£o.mp4',
    'typewriter-text': 'VOC√ä AONDE O FLAMENGO ESTIVER',
    'hero-subtitle': 'siga o flamengo e fa√ßa parte da historia',
    'hero-cta': 'COMPRE AGORA',
    
    // Se√ß√£o Aonde
    'secao-aonde-title': 'VOC√ä AONDE O<br>FLAMENGO ESTIVER',
    
    // Ag√™ncia
    'agencia-img': 'img/flamengo-agencia-oficial-absolut-sport-mobile.jpg',
    'agencia-title': 'AG√äNCIA OFICIAL <span>DA NA√á√ÉO</span>',
    'agencia-description': 'Porque somos a ag√™ncia oficial do Flamengo, oferecendo experi√™ncia 100% oficial, log√≠stica completa e suporte total para voc√™ s√≥ se preocupar em torcer dentro e fora de casa.',
    
    // Maracan√£ 1
    'maraca-title-1': 'O MARACA √â NOSSO<br><span>O LUGAR √â SEU.</span>',
    'maraca-description-1': 'Do embarque na G√°vea ao apito final no Maracan√£, seu jogo come√ßa antes com conforto, seguran√ßa e Transfer Oficial do Flamengo.',
    'maraca-cta-1': 'Saiba Mais',
    
    // Pacotes
    'pacotes-title': 'PACOTES DISPON√çVEIS',
    'pacote-1-img': 'img/pacote oeste inferior.png',
    'pacote-1-title': 'PACOTE<br>OESTE INFERIOR',
    'pacote-1-tag-1': 'NA TORCIDA',
    'pacote-1-tag-2': 'ESGOTANDO R√ÅDPIDO',
    'pacote-1-tag-3': 'MAIS PROCURADO',
    'pacote-2-img': 'img/pacote oeste inferior fla+.png',
    'pacote-2-title': 'PACOTE<br>ESPA√áO FLA+',
    'pacote-2-tag-1': 'ESPA√áO PREMIUM',
    'pacote-2-tag-2': 'VIS√ÉO PRIVILEGIADA',
    'pacote-2-tag-3': 'BUFFET LIBERADO',
    'pacote-3-img': 'img/Soccer Stadium crowd.png',
    'pacote-3-title': 'PACOTE<br>CAMAROTE',
    'pacote-3-tag-1': 'CAMAROTE',
    'pacote-3-tag-2': 'VIS√ÉO PRIVILEGIADA',
    'pacote-3-tag-3': 'ULTIMAS UNIDADES',
    
    // Maracan√£ 2
    'maraca-title-2': 'SIGA O FLAMENGO<br><span>AONDE ELE FOR</span>',
    'maraca-description-2': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec porta faucibus tellus vitae semper. Morbi vulputate viverra dui, nec bibendum est tincidunt lacinia. Donec iaculis orci eget tortor venenatis posuere.',
    'maraca-cta-2': 'Saiba Mais',
    
    // Benef√≠cios 1
    'beneficios-title-1': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec porta faucibus.',
    'beneficio-1-text': 'Ingressos no setor da torcida do Flamengo.',
    'beneficio-2-text': 'Hospedagem nos melhores hot√©is.',
    'beneficio-3-text': 'Matchday transfer.',
    'beneficio-4-text': 'Experi√™ncias locais, brindes e suporte.',
    'beneficio-5-text': 'A√©reo (sob consulta)',
    
    // Modal
    'modal-cta': 'COMPRAR AGORA',
    
    // Newsletter
    'newsletter-title': 'QUER SER AVISADO<br>SOBRE OS PR√ìXIMOS<br>PACOTES?',
    'newsletter-description': 'Deixe seu contato e garanta prioridade no acesso √†s melhores experi√™ncias nos jogos do Flamengo. Viva o Flamengo como protagonista!',
    'newsletter-label-nome': 'Nome*',
    'newsletter-label-email': 'Email*',
    'newsletter-label-time': 'Qual time voc√™ torce*',
    'newsletter-label-perfil': 'Eu sou um(a):*',
    'newsletter-label-captcha': '80 + 1 = ?',
    'newsletter-submit': 'Quero ser avisado!',
    'newsletter-img': 'img/Jogadores.png',
    
    // Absolut Sport
    'absolut-title': 'POR QUE COMPRAR COM A <span style="color: #155f97;">ABSOLUT SPORT?</span>',
    'absolut-description': 'Na ABSOLUT Sport, cada detalhe √© pensado para que voc√™ viva o Flamengo do jeito que merece: sem preocupa√ß√£o, com seguran√ßa e cercado de experi√™ncias oficiais e exclusivas. Somos a ag√™ncia oficial de viagens e experi√™ncias do Clube, o que garante acesso a ingressos certificados, log√≠stica completa e atendimento dedicado, seja no Maracan√£ ou em qualquer est√°dio do Brasil.',
    'absolut-cta': 'Saiba mais',
    
    // Benef√≠cios 2
    'beneficios-title-2': 'Por que escolher a ABSOLUT Sport?',
    'absolut-beneficio-1-text': 'Equipe Dedicada.',
    'absolut-beneficio-2-text': 'Atendimento e Suporte.',
    'absolut-beneficio-3-text': 'Melhores acomoda√ß√µes.',
    'absolut-beneficio-4-text': 'Transfer oficiais.',
    'absolut-beneficio-5-text': 'A√©reo sob cota√ß√£o.',
    'absolut-beneficio-6-text': 'Ingressos oficiais.',
    
    // FAQ
    'faq-title': 'Perguntas Frequentes',
    'faq-question-1': 'Como posso comprar ingressos?',
    'faq-answer-1': 'Voc√™ pode comprar ingressos atrav√©s do site oficial, nas bilheterias do Maracan√£ ou nos pontos de venda autorizados.',
    'faq-question-2': 'Qual √© o programa de s√≥cio-torcedor?',
    'faq-answer-2': 'O programa oferece benef√≠cios exclusivos como desconto em ingressos, prioridade na compra e produtos oficiais.',
    'faq-question-3': 'Como funciona o programa de turismo?',
    'faq-answer-3': 'Organizamos viagens para acompanhar o Flamengo em jogos fora de casa, com pacotes completos incluindo transporte e hospedagem.'
};

// Vari√°vel global para debug
let DEBUG_MODE = true;

/**
 * Fun√ß√£o para converter CSV em array de objetos
 * @param {string} csvText - Texto CSV
 * @returns {Array} Array de objetos com os dados
 */
function parseCSVConteudo(csvText) {
    if (DEBUG_MODE) console.log('üìù Parseando CSV...', csvText.substring(0, 200) + '...');
    
    const lines = csvText.trim().split('\n');
    const headers = lines[0].split(',').map(header => header.trim());
    
    if (DEBUG_MODE) console.log('üìã Headers encontrados:', headers);
    
    const dados = lines.slice(1).map((line, index) => {
        const values = line.split(',').map(value => value.trim());
        const obj = {};
        headers.forEach((header, headerIndex) => {
            obj[header] = values[headerIndex] || '';
        });
        
        if (DEBUG_MODE && index < 3) {
            console.log(`üìÑ Linha ${index + 1}:`, obj);
        }
        
        return obj;
    });
    
    if (DEBUG_MODE) console.log(`‚úÖ ${dados.length} linhas parseadas`);
    return dados;
}

/**
 * Fun√ß√£o para aplicar texto em um elemento
 * @param {string} id - ID do elemento
 * @param {string} conteudo - Conte√∫do a ser aplicado
 */
function aplicarTexto(id, conteudo) {
    const elemento = document.getElementById(id);
    if (elemento) {
        elemento.innerHTML = conteudo;
        if (DEBUG_MODE) console.log(`‚úÖ Texto aplicado em #${id}:`, conteudo.substring(0, 50) + (conteudo.length > 50 ? '...' : ''));
    } else {
        if (DEBUG_MODE) console.warn(`‚ö†Ô∏è Elemento n√£o encontrado: #${id}`);
    }
}

/**
 * Fun√ß√£o para aplicar imagem em um elemento
 * @param {string} id - ID do elemento
 * @param {string} src - URL da imagem
 */
function aplicarImagem(id, src) {
    const elemento = document.getElementById(id);
    if (elemento) {
        if (elemento.tagName === 'IMG') {
            elemento.src = src;
            elemento.alt = elemento.alt || 'Imagem carregada dinamicamente';
        } else {
            elemento.style.backgroundImage = `url('${src}')`;
        }
        if (DEBUG_MODE) console.log(`‚úÖ Imagem aplicada em #${id}:`, src);
    } else {
        if (DEBUG_MODE) console.warn(`‚ö†Ô∏è Elemento n√£o encontrado: #${id}`);
    }
}

/**
 * Fun√ß√£o para aplicar v√≠deo em um elemento
 * @param {string} id - ID do elemento
 * @param {string} src - URL do v√≠deo
 */
function aplicarVideo(id, src) {
    const elemento = document.getElementById(id);
    if (elemento) {
        if (elemento.tagName === 'VIDEO') {
            const source = elemento.querySelector('source');
            if (source) {
                source.src = src;
                elemento.load(); // Recarrega o v√≠deo
            }
        }
        if (DEBUG_MODE) console.log(`‚úÖ V√≠deo aplicado em #${id}:`, src);
    } else {
        if (DEBUG_MODE) console.warn(`‚ö†Ô∏è Elemento de v√≠deo n√£o encontrado: #${id}`);
    }
}

/**
 * Fun√ß√£o para carregar conte√∫do padr√£o
 */
function carregarConteudoPadrao() {
    console.log('üîÑ Carregando conte√∫do padr√£o...');
    
    Object.keys(CONTEUDO_PADRAO).forEach(id => {
        const conteudo = CONTEUDO_PADRAO[id];
        
        // Determinar o tipo baseado no conte√∫do
        if (id.includes('img') || id.includes('image')) {
            aplicarImagem(id, conteudo);
        } else if (id.includes('video')) {
            aplicarVideo(id, conteudo);
        } else {
            aplicarTexto(id, conteudo);
        }
    });
    
    console.log('‚úÖ Conte√∫do padr√£o carregado!');
}

/**
 * Fun√ß√£o para aplicar conte√∫do baseado no tipo
 * @param {Object} item - Item da planilha
 */
function aplicarConteudo(item) {
    const { id, tipo, conteudo_atual } = item;
    
    if (!id || !conteudo_atual) {
        if (DEBUG_MODE) console.warn('‚ö†Ô∏è Item inv√°lido:', item);
        return;
    }
    
    // Converter ID para formato usado no HTML (substituir underscore por h√≠fen)
    const elementId = id.replace(/_/g, '-');
    
    if (DEBUG_MODE) console.log(`üîÑ Aplicando conte√∫do: ${id} ‚Üí ${elementId} (${tipo || 'auto'})`);
    
    switch (tipo) {
        case 'texto':
            aplicarTexto(elementId, conteudo_atual);
            break;
        case 'imagem':
            aplicarImagem(elementId, conteudo_atual);
            break;
        case 'video':
            aplicarVideo(elementId, conteudo_atual);
            break;
        default:
            // Se n√£o tiver tipo especificado, tentar detectar automaticamente
            if (elementId.includes('img') || elementId.includes('image')) {
                aplicarImagem(elementId, conteudo_atual);
            } else if (elementId.includes('video')) {
                aplicarVideo(elementId, conteudo_atual);
            } else {
                aplicarTexto(elementId, conteudo_atual);
            }
    }
}

/**
 * Fun√ß√£o para aplicar conte√∫do din√¢mico da planilha
 * @param {Array} dados - Array com todos os dados da planilha
 */
function aplicarConteudoDinamico(dados) {
    if (!dados || dados.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum dado da planilha dispon√≠vel, usando conte√∫do padr√£o');
        return;
    }
    
    console.log('üîÑ Aplicando conte√∫do da planilha...');
    if (DEBUG_MODE) console.log('üìä Dados recebidos:', dados);
    
    // Filtrar dados v√°lidos
    const dadosValidos = dados.filter(item => {
        const valido = item.id && item.conteudo_atual;
        if (DEBUG_MODE && !valido) {
            console.log('‚ùå Item inv√°lido descartado:', item);
        }
        return valido;
    });
    
    if (DEBUG_MODE) console.log(`üìã ${dadosValidos.length} itens v√°lidos de ${dados.length} total`);
    
    dadosValidos.forEach((item, index) => {
        if (DEBUG_MODE) console.log(`üìù Aplicando item ${index + 1}/${dadosValidos.length}:`, item);
        aplicarConteudo(item);
    });
    
    console.log(`‚úÖ ${dadosValidos.length} itens da planilha aplicados!`);
}

/**
 * Fun√ß√£o para testar a conex√£o com a planilha
 */
async function testarPlanilha() {
    try {
        console.log('üß™ Testando conex√£o com planilha...');
        console.log('üîó URL:', GOOGLE_SHEETS_CONTEUDO_URL);
        
        const response = await fetch(GOOGLE_SHEETS_CONTEUDO_URL);
        console.log('üì° Response status:', response.status);
        console.log('üì° Response headers:', [...response.headers.entries()]);
        
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
        }
        
        const text = await response.text();
        console.log('üìÑ CSV recebido (primeiros 500 chars):', text.substring(0, 500));
        console.log('üìè Tamanho total do CSV:', text.length);
        
        const dados = parseCSVConteudo(text);
        console.log('‚úÖ Teste conclu√≠do com sucesso!');
        
        return dados;
        
    } catch (error) {
        console.error('‚ùå Erro no teste da planilha:', error);
        return null;
    }
}

/**
 * Fun√ß√£o principal para carregar e aplicar o conte√∫do
 */
async function carregarConteudoDinamico() {
    try {
        console.log('üîÑ Iniciando carregamento de conte√∫do din√¢mico...');
        
        // Primeiro, carregar conte√∫do padr√£o
        carregarConteudoPadrao();
        
        // Tentar carregar dados da planilha
        console.log('üîÑ Tentando carregar dados da planilha...');
        
        const response = await fetch(GOOGLE_SHEETS_CONTEUDO_URL);
        
        if (!response.ok) {
            throw new Error(`Erro ao carregar dados: ${response.status}`);
        }
        
        const csvText = await response.text();
        if (DEBUG_MODE) console.log('üìÑ CSV carregado, tamanho:', csvText.length);
        
        const dados = parseCSVConteudo(csvText);
        
        // Aplicar conte√∫do da planilha (sobrescrevendo o padr√£o onde dispon√≠vel)
        aplicarConteudoDinamico(dados);
        
        console.log('‚úÖ Carregamento de conte√∫do din√¢mico conclu√≠do!');
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao carregar conte√∫do da planilha:', error);
        console.log('‚úÖ Usando conte√∫do padr√£o como fallback');
    }
}

/**
 * Fun√ß√£o para recarregar o conte√∫do
 */
function recarregarConteudo() {
    console.log('üîÑ Recarregando conte√∫do...');
    carregarConteudoDinamico();
}

/**
 * Fun√ß√£o para aplicar efeito typewriter ao t√≠tulo hero
 */
function iniciarTypewriter() {
    const elemento = document.getElementById('typewriter-text');
    if (!elemento) return;
    
    const texto = elemento.textContent || elemento.innerHTML;
    if (!texto) return;
    
    elemento.textContent = '';
    let i = 0;
    
    const typewriter = setInterval(() => {
        if (i < texto.length) {
            elemento.textContent += texto.charAt(i);
            i++;
        } else {
            clearInterval(typewriter);
        }
    }, 100);
}

// Inicializar quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM carregado, iniciando sistema de conte√∫do din√¢mico...');
    
    // Carregar conte√∫do imediatamente
    carregarConteudoDinamico().then(() => {
        // Iniciar typewriter ap√≥s carregar o conte√∫do
        setTimeout(iniciarTypewriter, 1000);
    });
});

// Exportar fun√ß√µes para uso global
window.conteudoDinamico = {
    carregar: carregarConteudoDinamico,
    recarregar: recarregarConteudo,
    testar: testarPlanilha,
    debug: () => { DEBUG_MODE = !DEBUG_MODE; console.log('Debug mode:', DEBUG_MODE); },
    padrao: CONTEUDO_PADRAO
}; 